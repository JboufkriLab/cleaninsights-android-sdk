def gitSha() {
    return 'git rev-parse --short HEAD'.execute().text.trim()
}

apply plugin: 'com.android.library'
apply plugin: 'com.github.dcendents.android-maven'

group='com.github.cleaninsights'

def versionMajor = 1
def versionMinor = 0
def versionPatch = 3
def myVersionCode = versionMajor * 10000 + versionMinor * 100 + versionPatch
def myVersionName = "${versionMajor}.${versionMinor}.${versionPatch}"

ext {
    bintrayRepo = 'maven'
    bintrayName = 'cleaninsights-piwik-sdk-android'

    publishedGroupId = 'io.cleaninsights.sdk'
    libraryName = 'Clean Insights Piwik SDK for Android'
    artifact = 'cleaninsights-sdk'

    libraryDescription = 'Clean Insights SDK for Android based on Piwik '

    siteUrl = 'https://github.com/berkmancenter/analyzethis'
    gitUrl = 'https://github.com/berkmancenter/analyzethis.git'

    libraryVersion = myVersionName

    developerId = 'cleaninsights'
    developerName = 'Clean Insights'
    developerEmail = 'info@cleaninsights.io'

    licenseName = 'TBD'
    licenseUrl = 'https://github.com/berkmancenter/analyzethis/blob/master/LICENSE'
    allLicenses = ["TBD"]
}

android {
    compileSdkVersion 25
    buildToolsVersion "25"

    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 25
        versionCode myVersionCode
        versionName myVersionName
    }

}

dependencies {
    repositories {
        jcenter()
    }

    compile 'com.android.support:support-annotations:25.0.0'
    compile 'com.jakewharton.timber:timber:4.1.2'
    compile group: 'com.google.guava', name: 'guava', version: '20.0'
    compile group: 'com.google.code.findbugs', name: 'jsr305', version: '3.0.1'

    //GuardianProject NetCipher to support network obfuscation, and strong TLS configuration
    //compile 'info.guardianproject.netcipher:netcipher:2.0.0-alpha1'

    //Supporting pinning!
    compile 'com.squareup.okhttp3:okhttp:3.6.0'

    //network hardening and onion routing
    compile 'info.guardianproject.netcipher:netcipher:2.0.0-alpha1'
    compile 'info.guardianproject.netcipher:netcipher-okhttp3:2.0.0-alpha1'

    //SweetAlerts make dialog boxes so much more friendly and fun
    compile 'cn.pedant.sweetalert:library:1.3'

    //SquareUp Tape library, for QueueFile
    compile 'com.squareup.tape2:tape:2.0.0-SNAPSHOT'

    // Espresso
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.0')
    androidTestCompile('com.android.support.test:testing-support-lib:0.1')
    // Robolectric
    testCompile 'junit:junit:4.12'
    testCompile 'org.hamcrest:hamcrest-core:1.3'
    testCompile 'org.hamcrest:hamcrest-library:1.3'
    testCompile 'org.hamcrest:hamcrest-integration:1.3'
    testCompile('org.robolectric:robolectric:2.4') {
        exclude module: 'classworlds'
        exclude module: 'commons-logging'
        exclude module: 'httpclient'
        exclude module: 'maven-artifact'
        exclude module: 'maven-artifact-manager'
        exclude module: 'maven-error-diagnostics'
        exclude module: 'maven-model'
        exclude module: 'maven-project'
        exclude module: 'maven-settings'
        exclude module: 'plexus-container-default'
        exclude module: 'plexus-interpolation'
        exclude module: 'plexus-utils'
        exclude module: 'wagon-file'
        exclude module: 'wagon-http-lightweight'
        exclude module: 'wagon-provider-api'
    }
}

/**
 * JAR
 */
task clearJar(type: Delete) {
    delete fileTree(dir: "jar", exclude: "dont_delete.txt")
}

task makeJar(type: Copy) {
    from('build/intermediates/bundles/release/')
    into('jar/')
    include('classes.jar')
    rename('classes.jar', 'CleanInsightsPiwikAndroidSdk-' + gitSha() + '.jar')
}

makeJar.dependsOn(clearJar, build)

/**
 * Coverage
 */
apply plugin: 'jacoco'
apply plugin: 'com.github.kt3k.coveralls'

jacoco {
    toolVersion = "0.7.1.201405082137"
}

buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.4.0x'
    }
}

task jacocoTestReport(type: JacocoReport, dependsOn: "testDebugUnitTest") {
    reports {
        xml.enabled = true
        html.enabled = true
    }
    classDirectories = fileTree(
            dir: './build/intermediates/classes/debug',
            excludes: ['org/piwik/R*.class',
                       '**/BuildConfig.class',
                       '**/*$InjectAdapter.class',
                       '**/*$ModuleAdapter.class',
                       '**/*$ViewInjector*.class'
            ])
    sourceDirectories = files([
            'src/main/java',
    ])
    executionData = files('build/jacoco/testDebugUnitTest.exec')
}

coveralls {
    jacocoReportPath = 'build/reports/jacoco/jacocoTestReport/jacocoTestReport.xml'
    sourceDirs = ['src/main/java']
}

/**
 * Javadoc
 */
android.libraryVariants.all { variant ->
    task("generate${variant.name.capitalize()}Javadoc", type: Javadoc) {
        title = "Documentation for Android $android.defaultConfig.versionName b$android.defaultConfig.versionCode"
        destinationDir = new File("${project.getProjectDir()}/build/docs/javadoc/")
        source = variant.javaCompile.source

        ext.androidJar = "${android.sdkDirectory}/platforms/${android.compileSdkVersion}/android.jar"
        classpath = files(variant.javaCompile.classpath.files) + files(ext.androidJar)

        description "Generates Javadoc for $variant.name."

        options.memberLevel = JavadocMemberLevel.PRIVATE
        options.links("http://docs.oracle.com/javase/7/docs/api/");
        options.links("http://developer.android.com/reference/reference/");
        exclude '**/BuildConfig.java'
        exclude '**/R.java'
    }
}

//apply from: 'https://raw.githubusercontent.com/nuuneoi/JCenter/master/installv1.gradle'
//apply from: 'https://raw.githubusercontent.com/nuuneoi/JCenter/master/bintrayv1.gradle'
